const express = require("express");
const sqlite3 = require('better-sqlite3');

const { objCamelToSnake, objSnakeToCamel } = require('../HelperFunctions/HelperFunctions')

const router = express.Router();

const db = sqlite3('./SecuredDB.db');

const ThreadFunctions = require('../DBfunctions/ThreadFunctions');
const MyThreads = new ThreadFunctions('./SecuredDB.db');

const PostFunctions = require('../DBfunctions/PostFunctions');
const { posts } = require("../ACLsettings");
const MyPosts = new PostFunctions('./SecuredDB.db')


router
    .route("")
        .get( (req, res) => {

            return res.json(MyThreads.getAllThreads())
        })

        .post( (req, res) => {

            if(!MyThreads.threadExists(req.body.parentForum)){
                return res.json("no such forum")
            }

            /*
            input body should look like this
            {
                parentForum: "somenumber",
                threadTitle: "some string"
                post: {
                    content: "some contentent",
                }

            }
            */

            /*** additional values are set here, if they are not included, like  ***/
            //0: postId is autogenerated
            //1: threadId is set once the thread has been saved
            //2: threads are active by default, should be set here
            //3: moderatorComment will be set here if it is not included 
            //handle if the post is a moderator message
            //only moderators can
            const timestamp = Math.floor(Date.now() / 1000);
            const author = req.session.user.id;
            let moderatorComment;

            if(req.body.moderatorComment){
                moderatorComment = req.body.moderatorComment
            } else {
                moderatorComment = 0;
            }

            let thread = {
                        parentForum: req.body.parentForum,
                        threadTitle: req.body.threadTitle,
                        threadActive: 1,
                        timestamp,
                        author
                        };

            let post = {
                        content: req.body.content,
                        moderatorComment,
                        timestamp,
                        author
                        };

            newThread = MyThreads.saveThread(thread);

            thread.threadId = newThread.lastInsertRowid
            post.parentThread = newThread.lastInsertRowid;

            const savedPost = MyPosts.savePost(post);
            post.postId = savedPost.lastInsertRowid

            return res.json({thread, post})
        })

router
    .route("/:id")
        .get( (req, res) => {

            let page;
            if(req.query.page){
                page = req.query.page -1;
            } else {
                page = 0;
            }

            const threadId = req.params.id

            if(!MyThreads.threadExists(threadId)){
                return res.json("no such thread")
            }

            const thread = MyThreads.getThreadWithPosts(threadId, page);

            return res.json(thread)
        })

        .post( (req, res) => {
            //we need to check if hte post exists
            //adds post to thread

            /*{
                threadId: #somenumber,
                content: "some contentent",
                timestamp: "unix time integer", is set
                author: "foreign key, author",
                moderatorMessage: "boolean, true or false"
            }*/

            let id = req.params.id;
            let body = req.body;
            if(!MyThreads.threadExists(id)){
                return res.json("no such thread")
            }

            const newPost = MyPosts.savePost({parent_thread: id, ...body})

            return res.json(newPost);
        })

module.exports = router;